import cv2
import pyautogui
import tkinter as tk
import keyboard
import threading
import numpy as np

def save_button(selected_button):
    button.config(text=f"Selected Button: {selected_button}")

def sploit():
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    while True:
        screen = pyautogui.screenshot()  # Capture a screenshot of the entire screen
        frame = cv2.cvtColor(np.array(screen), cv2.COLOR_RGB2BGR)  # Convert the screenshot to OpenCV format
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
        if len(faces) > 0:
            x, y, w, h = faces[0]
            target_x = x + w // 2
            target_y = y + h // 2
            pyautogui.moveTo(target_x, target_y)  # Move the cursor to the center of the detected face
        cv2.imshow('Face Tracking', frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    cv2.destroyAllWindows()

def clear_message():
    print("")

def button_selected():
    selected_button = "F2"  # Set the selected button to F2
    save_button(selected_button)
    keyboard.add_hotkey(selected_button, sploit)

def on_close():
    window.withdraw()

def on_minimize(event):
    window.withdraw()

def on_activate(event):
    window.deiconify()

def main():
    global window, button
    window = tk.Tk()
    window.title("NEXPLOITS")

    label = tk.Label(window, text="Select the button to run the Exploits:")
    label.pack()

    button = tk.Button(window, text="Select Button", command=button_selected)
    button.pack()

    window.protocol("WM_DELETE_WINDOW", on_close)
    window.bind("<Unmap>", on_minimize)
    window.bind("<Map>", on_activate)

    t = threading.Thread(target=keyboard.wait, args=("F2", sploit))
    t.daemon = True
    t.start()

    window.mainloop()

if __name__ == "__main__":
    main()
